// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Contexts;

#nullable disable

namespace Server.Migrations
{
    [DbContext(typeof(CannaLogContext))]
    [Migration("20230428005904_addUser")]
    partial class addUser
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Server.Models.Additive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Tags")
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Additives");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Brand = "General Hydroponics",
                            IsDeleted = false,
                            Name = "Micro",
                            Type = "NUTES"
                        },
                        new
                        {
                            Id = 2,
                            Brand = "General Hydroponics",
                            IsDeleted = false,
                            Name = "Bloom",
                            Type = "NUTES"
                        },
                        new
                        {
                            Id = 3,
                            Brand = "General Hydroponics",
                            IsDeleted = false,
                            Name = "CaliMag",
                            Type = "NUTES"
                        },
                        new
                        {
                            Id = 4,
                            Brand = "General Hydroponics",
                            IsDeleted = false,
                            Name = "PH Up",
                            Type = "PH"
                        },
                        new
                        {
                            Id = 5,
                            Brand = "General Hydroponics",
                            IsDeleted = false,
                            Name = "PH Down",
                            Type = "PH"
                        },
                        new
                        {
                            Id = 6,
                            Brand = "Botanicare",
                            IsDeleted = false,
                            Name = "Hydroguard",
                            Type = "ROOT SUPPLEMENT"
                        });
                });

            modelBuilder.Entity("Server.Models.AdditiveAdjustment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("FinalPPM")
                        .HasColumnType("int");

                    b.Property<int?>("GrowLogId")
                        .HasColumnType("int");

                    b.Property<int>("InitialPPM")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("GrowLogId");

                    b.ToTable("AdditiveAdjustments");
                });

            modelBuilder.Entity("Server.Models.AdditiveDosage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("AdditiveAdjustmentId")
                        .HasColumnType("int");

                    b.Property<int>("AdditiveId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasPrecision(8, 3)
                        .HasColumnType("decimal(8,3)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UnitofMeasure")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("AdditiveAdjustmentId");

                    b.HasIndex("AdditiveId");

                    b.ToTable("AdditiveDosages");
                });

            modelBuilder.Entity("Server.Models.GrowLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<decimal?>("AirTemperature")
                        .HasPrecision(4, 1)
                        .HasColumnType("decimal(4,1)");

                    b.Property<decimal>("FinalPH")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)");

                    b.Property<int>("FinalPPM")
                        .HasColumnType("int");

                    b.Property<decimal?>("GrowMediumTemperature")
                        .HasPrecision(4, 1)
                        .HasColumnType("decimal(4,1)");

                    b.Property<decimal?>("Humidity")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)");

                    b.Property<decimal>("InitialPH")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)");

                    b.Property<int>("InitialPPM")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<decimal?>("LightHeight")
                        .HasPrecision(4, 1)
                        .HasColumnType("decimal(4,1)");

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Notes")
                        .HasColumnType("longtext");

                    b.Property<int>("PlantAge")
                        .HasColumnType("int");

                    b.Property<decimal?>("PlantHeight")
                        .HasPrecision(4, 1)
                        .HasColumnType("decimal(4,1)");

                    b.Property<int>("PlantId")
                        .HasColumnType("int");

                    b.Property<string>("Tags")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("PlantId");

                    b.ToTable("GrowLogs");
                });

            modelBuilder.Entity("Server.Models.Plant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BaseNutrientsBrand")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Breeder")
                        .HasColumnType("longtext");

                    b.Property<string>("GrowMedium")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("GrowType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("HarvestDate")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsFeminized")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LightingSchedule")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("LightingType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Strain")
                        .HasColumnType("longtext");

                    b.Property<decimal>("TargetPH")
                        .HasPrecision(3, 1)
                        .HasColumnType("decimal(3,1)");

                    b.Property<string>("TerminationReason")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("TransplantDate")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Plants");
                });

            modelBuilder.Entity("Server.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Server.Models.AdditiveAdjustment", b =>
                {
                    b.HasOne("Server.Models.GrowLog", null)
                        .WithMany("AdditiveAdjustments")
                        .HasForeignKey("GrowLogId");
                });

            modelBuilder.Entity("Server.Models.AdditiveDosage", b =>
                {
                    b.HasOne("Server.Models.AdditiveAdjustment", null)
                        .WithMany("Dosages")
                        .HasForeignKey("AdditiveAdjustmentId");

                    b.HasOne("Server.Models.Additive", "Additive")
                        .WithMany()
                        .HasForeignKey("AdditiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Additive");
                });

            modelBuilder.Entity("Server.Models.GrowLog", b =>
                {
                    b.HasOne("Server.Models.Plant", "Plant")
                        .WithMany("GrowLogs")
                        .HasForeignKey("PlantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("Server.Models.AdditiveAdjustment", b =>
                {
                    b.Navigation("Dosages");
                });

            modelBuilder.Entity("Server.Models.GrowLog", b =>
                {
                    b.Navigation("AdditiveAdjustments");
                });

            modelBuilder.Entity("Server.Models.Plant", b =>
                {
                    b.Navigation("GrowLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
